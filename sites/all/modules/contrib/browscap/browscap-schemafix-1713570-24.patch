diff --git a/README.txt b/README.txt
index 980a204..81f78a1 100644
--- a/README.txt
+++ b/README.txt
@@ -1,46 +1,46 @@
-Browscap provides an improved version of PHP's get_browser() function.
-
-The get_browser() function can be used to tell what a visitor's browser is
-capable of. Unfortunately, the version provided by PHP has a number of
-limitations, namely:
-
-* It can be difficult or impossible to configure for shared hosting
-  environments.
-* The data used to identify browsers and determine their capabilities requires
-  consistent maintenance to keep up-to-date.
-
-Browscap automates maintenance by storing browser data in a database and
-automatically retrieving the latest data on a configurable schedule.
-
-Requirements
-------------
-
-Browscap requires that your server be able to "phone out" (make a http request)
-to retrieve and update its user agent database.
-
-Note: Some hosting companies have this capability blocked.
-
-Installation
-------------
-
-Browscap can be installed via the standard Drupal installation process.
-http://drupal.org/node/895232
-
-API
----
-
-Modules can make use of browscap data by calling browscap_get_browser()
-anywhere they would otherwise call the PHP get_browser()
-(http://us3.php.net/manual/en/function.get-browser.php) function.
-
-Note: browser_name_regex is not returned.
-
-Credits
--------
-
-Development of Browscap is sponsored by Acquia (http://www.acquia.com) and the
-Ontario Ministry of Northern Development and Mines (http://www.mndm.gov.on.ca).
-
-A special thanks goes out to Gary Keith (http://www.garykeith.com) who provides
-regular updates to the browscap user agent database, and specifically for
-adding a non-zipped CSV version of browscap to support this module.
+Browscap provides an improved version of PHP's get_browser() function.
+
+The get_browser() function can be used to tell what a visitor's browser is
+capable of. Unfortunately, the version provided by PHP has a number of
+limitations, namely:
+
+* It can be difficult or impossible to configure for shared hosting
+  environments.
+* The data used to identify browsers and determine their capabilities requires
+  consistent maintenance to keep up-to-date.
+
+Browscap automates maintenance by storing browser data in a database and
+automatically retrieving the latest data on a configurable schedule.
+
+Requirements
+------------
+
+Browscap requires that your server be able to "phone out" (make a http request)
+to retrieve and update its user agent database.
+
+Note: Some hosting companies have this capability blocked.
+
+Installation
+------------
+
+Browscap can be installed via the standard Drupal installation process.
+http://drupal.org/node/895232
+
+API
+---
+
+Modules can make use of browscap data by calling browscap_get_browser()
+anywhere they would otherwise call the PHP get_browser()
+(http://us3.php.net/manual/en/function.get-browser.php) function.
+
+Note: browser_name_regex is not returned.
+
+Credits
+-------
+
+Development of Browscap is sponsored by Acquia (http://www.acquia.com) and the
+Ontario Ministry of Northern Development and Mines (http://www.mndm.gov.on.ca).
+
+A special thanks goes out to Gary Keith (http://www.garykeith.com) who provides
+regular updates to the browscap user agent database, and specifically for
+adding a non-zipped CSV version of browscap to support this module.
diff --git a/browscap.admin.inc b/browscap.admin.inc
index 89d6fb1..ecdc330 100644
--- a/browscap.admin.inc
+++ b/browscap.admin.inc
@@ -1,63 +1,59 @@
-<?php
-/**
- * @file
- * Generate configuration form.
- */
-
-/**
- * Implements hook_form().
- */
-function browscap_settings_form($form, &$form_state) {
-  // Check the local browscap data version number
-  $version = variable_get('browscap_version', 0);
-
-  // If the version number is 0 then browscap data has never been fetched
-  if ($version == 0) {
-    $version = t('Never fetched');
-  }
-
-  $form['data'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('User agent detection settings'),
-  );
-  $form['data']['browscap_data_version'] = array(
-    '#markup' => '<p>' . t('Current browscap data version: %fileversion.', array('%fileversion' => $version)) . '</p>',
-  );
-  $form['data']['browscap_enable_automatic_updates'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Enable automatic updates'),
-    '#default_value' => variable_get('browscap_enable_automatic_updates', TRUE),
-    '#description' => t('Automatically update the user agent detection information.'),
-  );
-  $form['data']['browscap_automatic_updates_timer'] = array(
-    '#type' => 'select',
-    '#title' => t('Check for new user agent detection information every'),
-    '#default_value' => variable_get('browscap_automatic_updates_timer', 604800),
-    '#options' => drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval'),
-    '#description' => t('Newer user agent detection information will be automatically downloaded and installed. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status'))),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="browscap_enable_automatic_updates"]' => array('checked' => TRUE),
-      ),
-    ),
-  );
-  $form['actions']['browscap_refresh'] = array(
-    '#type' => 'submit',
-    '#value' => t('Refresh browscap data'),
-    '#submit' => array('browscap_refresh_submit'),
-    '#weight' => 10,
-  );
-
-  return system_settings_form($form);
-}
-
-/**
- * Submit handler for the refresh browscap button.
- */
-function browscap_refresh_submit($form, &$form_state) {
-  // Update the browscap information
-  _browscap_import(FALSE);
-
-  // Record when the browscap information was updated
-  variable_set('browscap_imported', REQUEST_TIME);
-}
+<?php
+/**
+ * @file
+ * Generate configuration form.
+ */
+
+/**
+ * Implements hook_form().
+ */
+function browscap_settings_form($form, &$form_state) {
+  // Check the local browscap data version number
+  $version = variable_get('browscap_version', 0);
+
+  // If the version number is 0 then browscap data has never been fetched
+  if ($version == 0) {
+    $version = t('Never fetched');
+  }
+
+  $form['browscap_data_version'] = array(
+    '#markup' => '<p>' . t('Current browscap data version: %fileversion.', array('%fileversion' => $version)) . '</p>',
+  );
+  $form['browscap_enable_automatic_updates'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable automatic updates'),
+    '#default_value' => variable_get('browscap_enable_automatic_updates', TRUE),
+    '#description' => t('Automatically update the user agent detection information.'),
+  );
+  $form['browscap_automatic_updates_timer'] = array(
+    '#type' => 'select',
+    '#title' => t('Check for new user agent detection information every'),
+    '#default_value' => variable_get('browscap_automatic_updates_timer', 604800),
+    '#options' => drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval'),
+    '#description' => t('Newer user agent detection information will be automatically downloaded and installed. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status'))),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="browscap_enable_automatic_updates"]' => array('checked' => TRUE),
+      ),
+    ),
+  );
+  $form['actions']['browscap_refresh'] = array(
+    '#type' => 'submit',
+    '#value' => t('Refresh browscap data'),
+    '#submit' => array('browscap_refresh_submit'),
+    '#weight' => 10,
+  );
+
+  return system_settings_form($form);
+}
+
+/**
+ * Submit handler for the refresh browscap button.
+ */
+function browscap_refresh_submit($form, &$form_state) {
+  // Update the browscap information
+  _browscap_import(FALSE);
+
+  // Record when the browscap information was updated
+  variable_set('browscap_imported', REQUEST_TIME);
+}
diff --git a/browscap.info b/browscap.info
index c89eb9b..e96a746 100644
--- a/browscap.info
+++ b/browscap.info
@@ -1,11 +1,4 @@
-name = Browscap
-description = Provides a replacement for PHPs get_browser() function.
-core = 7.x
-configure = admin/config/system/browscap
-
-; Information added by drupal.org packaging script on 2012-11-22
-version = "7.x-2.0"
-core = "7.x"
-project = "browscap"
-datestamp = "1353586510"
-
+name = Browscap
+description = Provides a replacement for PHPs get_browser() function.
+core = 7.x
+configure = admin/config/system/browscap
diff --git a/browscap.install b/browscap.install
index f35c0a2..53cb3fe 100644
--- a/browscap.install
+++ b/browscap.install
@@ -1,50 +1,432 @@
-<?php
-/**
- * @file
- * Install, update and uninstall functions for the Browscap module.
- */
-
-/**
- * Implements hook_install().
- */
-function browscap_schema() {
-  $schema['browscap'] = array(
-    'fields' => array(
-      'useragent' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-      ),
-      'data' => array(
-        'type' => 'blob',
-        'size' => 'big',
-      ),
-    ),
-    'primary key' => array('useragent'),
-  );
-  $schema['cache_browscap'] = drupal_get_schema_unprocessed('system', 'cache');
-
-  return $schema;
-}
-
-/**
- * Implements hook_install().
- */
-function browscap_install() {
-  // Update the browscap information
-  _browscap_import();
-
-  // Record when the browscap information was updated
-  variable_set('browscap_imported', REQUEST_TIME);
-}
-
-/**
- * Implements hook_uninstall().
- */
-function browscap_uninstall() {
-  variable_del('browscap_imported');
-  variable_del('browscap_version');
-  variable_del('browscap_enable_automatic_updates');
-  variable_del('browscap_automatic_updates_timer');
-}
+<?php
+/**
+ * @file
+ * Install, update and uninstall functions for the Browscap module.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function browscap_schema() {
+  $schema['browscap'] = array(
+    'fields' => array(
+      'useragent' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'data' => array(
+        'type' => 'blob',
+        'size' => 'big',
+      ),
+      'propertyname' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'agentid' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+      ),
+      'masterparent' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+      ),
+      'litemode' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+      ),
+      'parent' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'comment' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'browser' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'version' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'majorver' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+      ),
+      'minorver' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+      ),
+      'platform' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'platform_version' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'platform_description' => array(
+        'type' => 'text',
+      ),
+      'alpha' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'beta' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'win16' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'win32' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'win64' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'frames' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'iframes' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'tables' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'cookies' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'backgroundsounds' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'javascript' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'vbscript' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'javaapplets' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'activexcontrols' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'ismobiledevice' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'issyndicationreader' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'crawler' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'default' => 0,
+      ),
+      'cssversion' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'aolversion' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'device_name' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'device_maker' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'renderingengine_name' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'renderingengine_version' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+      'renderingengine_description' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'default' => '',
+      ),
+    ),
+    'primary key' => array('useragent'),
+    'indexes' => array(
+      'parent' => array('parent'),
+    ),
+  );
+  $schema['cache_browscap'] = drupal_get_schema_unprocessed('system', 'cache');
+
+  return $schema;
+}
+
+/**
+ * Implements hook_install().
+ */
+function browscap_install() {
+  // Update the browscap information
+  _browscap_import();
+
+  // Record when the browscap information was updated
+  variable_set('browscap_imported', REQUEST_TIME);
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function browscap_uninstall() {
+  variable_del('browscap_imported');
+  variable_del('browscap_version');
+  variable_del('browscap_enable_automatic_updates');
+  variable_del('browscap_automatic_updates_timer');
+}
+
+/**
+ * Drop the unused Browscap 1.x statistics table.
+ * Create the required fields in the schema.
+ * Remove the last import setting to force refresh.
+ */
+function browscap_update_7200() {
+  db_drop_table('browscap_statistics');
+  variable_del('browscap_imported');
+  variable_del('browscap_version');
+  
+  $fields = array(
+    'propertyname' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'not null' => TRUE,
+      'default' => '',
+    ),
+    'agentid' => array(
+      'type' => 'int',
+      'unsigned' => TRUE,
+    ),
+    'masterparent' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+    ),
+    'litemode' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+    ),
+    'parent' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'comment' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'browser' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'version' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'majorver' => array(
+      'type' => 'int',
+      'unsigned' => TRUE,
+    ),
+    'minorver' => array(
+      'type' => 'int',
+      'unsigned' => TRUE,
+    ),
+    'platform' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'platform_version' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'platform_description' => array(
+      'type' => 'text',
+    ),
+    'alpha' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'beta' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'win16' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'win32' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'win64' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'frames' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'iframes' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'tables' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'cookies' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'backgroundsounds' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'javascript' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'vbscript' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'javaapplets' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'activexcontrols' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'ismobiledevice' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'issyndicationreader' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'crawler' => array(
+      'type' => 'int',
+      'size' => 'tiny',
+      'default' => 0,
+    ),
+    'cssversion' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'aolversion' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'device_name' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'device_maker' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'renderingengine_name' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'renderingengine_version' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+    'renderingengine_description' => array(
+      'type' => 'varchar',
+      'length' => 255,
+      'default' => '',
+    ),
+  );
+  
+  // Loop through the new fields and add them
+  foreach ($fields as $name => $field) {
+    db_add_field('browscap', $name, $field);
+  }
+  // Add the parent index
+  db_add_index('browscap', 'parent', array('parent'));
+}
diff --git a/browscap.module b/browscap.module
index a6c526a..fd424f7 100644
--- a/browscap.module
+++ b/browscap.module
@@ -1,129 +1,129 @@
-<?php
-/**
- * @file
- * Replacement for PHP's get_browser() function.
- */
-
-// Include browscap data import and user agent recording functions
-include_once('import.inc');
-
-/**
- * Implements hook_permission().
- */
-function browscap_permission() {
-  return array(
-    'administer browscap' => array(
-      'title' => t('Administer browscap'),
-    ),
-  );
-}
-
-/**
- * Implements hook_menu().
- */
-function browscap_menu() {
-  $items['admin/config/system/browscap'] = array(
-    'title' => 'Browscap',
-    'description' => 'Configure user agent monitoring and browscap information settings.',
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('browscap_settings_form'),
-    'access arguments' => array('administer browscap'),
-    'file' => 'browscap.admin.inc',
-  );
-
-  return $items;
-}
-
-/**
- * Implements hook_help().
- */
-function browscap_help($path, $arg) {
-  switch ($path) {
-    case 'admin/config/system/browscap':
-      return '<p>' . t('Settings for user agent detection and the log that Browscap will keep about user agents that visit the site. See <a href="@statistics">user agent statistics</a> for the actual information.', array('@statistics' => url('admin/reports/browscap'))) . '</p>';
-  }
-}
-
-/**
- * Implements hook_cron().
- */
-function browscap_cron() {
-  if (variable_get('browscap_enable_automatic_updates', TRUE) == TRUE) {
-    // Check the current update timer
-    $automatic_update_timer = variable_get('browscap_automatic_updates_timer', 604800);
-
-    // Check when the last update occurred
-    $last_imported = variable_get('browscap_imported', REQUEST_TIME);
-
-    // Update the browscap data if the amount of time specified by the update
-    // timer has passed
-    if (($last_imported + $automatic_update_timer) < REQUEST_TIME) {
-      // Update the browscap information
-      _browscap_import();
-
-      // Record when the browscap information was updated
-      variable_set('browscap_imported', REQUEST_TIME);
-    }
-  }
-}
-
-/**
- * Provide data about a user agent string or the current user agent.
- *
- * @param string $user_agent
- *   Optional user agent string to test. If empty, use the value from the current request.
- * @return array
- *   An array of information about the user agent.
- */
-function browscap_get_browser($user_agent = NULL) {
-  // Determine the current user agent if a user agent was not specified
-  if ($user_agent != NULL) {
-    $user_agent = check_plain(trim($user_agent));
-  }
-  elseif ($user_agent == NULL && isset($_SERVER['HTTP_USER_AGENT'])) {
-    $user_agent = check_plain(trim($_SERVER['HTTP_USER_AGENT']));
-  }
-  else {
-    $user_agent = 'Default Browser';
-  }
-
-  // Check the cache for user agent data
-  $cache = cache_get($user_agent, 'cache_browscap');
-
-  // Attempt to find a cached user agent
-  // Otherwise store the user agent data in the cache
-  if (!empty($cache) && ($cache->created > REQUEST_TIME - 60 * 60 * 24)) {
-    $user_agent_properties = $cache->data;
-  }
-  else {
-    // Find the user agent's properties
-    // The useragent column contains the wildcarded pattern to match against our
-    // full-length string while the ORDER BY chooses the most-specific matching
-    // pattern
-    $user_agent_properties = db_query("SELECT * FROM {browscap} WHERE :useragent LIKE useragent ORDER BY LENGTH(useragent) DESC", array(':useragent' => $user_agent))
-      ->fetchObject();
-
-    // Store user agent data in the cache
-    cache_set($user_agent, $user_agent_properties, 'cache_browscap');
-  }
-
-  // Create an array to hold the user agent's properties
-  $properties = array();
-
-  // Return an array of user agent properties
-  if (isset($user_agent_properties) && isset($user_agent_properties->data)) {
-    // Unserialize the user agent data found in the cache or the database
-    $properties = unserialize($user_agent_properties->data);
-
-    // Set the user agent name and name pattern
-    $properties['useragent'] = $user_agent;
-    $properties['browser_name_pattern'] = strtr($user_agent_properties->useragent, '%_', '*?');
-  }
-  else {
-    // Set the user agent name and name pattern to 'unrecognized'
-    $properties['useragent'] = 'unrecognized';
-    $properties['browser_name_pattern'] = strtr('unrecognized', '%_', '*?');
-  }
-
-  return $properties;
-}
+<?php
+/**
+ * @file
+ * Replacement for PHP's get_browser() function.
+ */
+
+// Include browscap data import and user agent recording functions
+include_once('import.inc');
+
+/**
+ * Implements hook_permission().
+ */
+function browscap_permission() {
+  return array(
+    'administer browscap' => array(
+      'title' => t('Administer browscap'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function browscap_menu() {
+  $items['admin/config/system/browscap'] = array(
+    'title' => 'Browscap',
+    'description' => 'View the current browscap data version and configure automatic update settings.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('browscap_settings_form'),
+    'access arguments' => array('administer browscap'),
+    'file' => 'browscap.admin.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_help().
+ */
+function browscap_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/system/browscap':
+      return '<p>' . t('View the current browscap data version and configure automatic update settings.') . '</p>';
+  }
+}
+
+/**
+ * Implements hook_cron().
+ */
+function browscap_cron() {
+  if (variable_get('browscap_enable_automatic_updates', TRUE) == TRUE) {
+    // Check the current update timer
+    $automatic_update_timer = variable_get('browscap_automatic_updates_timer', 604800);
+
+    // Check when the last update occurred
+    $last_imported = variable_get('browscap_imported', REQUEST_TIME);
+
+    // Update the browscap data if the amount of time specified by the update
+    // timer has passed
+    if (($last_imported + $automatic_update_timer) < REQUEST_TIME) {
+      // Update the browscap information
+      _browscap_import();
+
+      // Record when the browscap information was updated
+      variable_set('browscap_imported', REQUEST_TIME);
+    }
+  }
+}
+
+/**
+ * Provide data about a user agent string or the current user agent.
+ *
+ * @param string $user_agent
+ *   Optional user agent string to test. If empty, use the value from the current request.
+ * @return array
+ *   An array of information about the user agent.
+ */
+function browscap_get_browser($user_agent = NULL) {
+  // Determine the current user agent if a user agent was not specified
+  if ($user_agent != NULL) {
+    $user_agent = check_plain(trim($user_agent));
+  }
+  elseif ($user_agent == NULL && isset($_SERVER['HTTP_USER_AGENT'])) {
+    $user_agent = check_plain(trim($_SERVER['HTTP_USER_AGENT']));
+  }
+  else {
+    $user_agent = 'Default Browser';
+  }
+
+  // Check the cache for user agent data
+  $cache = cache_get($user_agent, 'cache_browscap');
+
+  // Attempt to find a cached user agent
+  // Otherwise store the user agent data in the cache
+  if (!empty($cache) && ($cache->created > REQUEST_TIME - 60 * 60 * 24)) {
+    $user_agent_properties = $cache->data;
+  }
+  else {
+    // Find the user agent's properties
+    // The useragent column contains the wildcarded pattern to match against our
+    // full-length string while the ORDER BY chooses the most-specific matching
+    // pattern
+    $user_agent_properties = db_query("SELECT * FROM {browscap} WHERE :useragent LIKE useragent ORDER BY LENGTH(useragent) DESC", array(':useragent' => $user_agent))
+      ->fetchObject();
+
+    // Store user agent data in the cache
+    cache_set($user_agent, $user_agent_properties, 'cache_browscap');
+  }
+
+  // Create an array to hold the user agent's properties
+  $properties = array();
+
+  // Return an array of user agent properties
+  if (isset($user_agent_properties) && isset($user_agent_properties->data)) {
+    // Unserialize the user agent data found in the cache or the database
+    $properties = unserialize($user_agent_properties->data);
+
+    // Set the user agent name and name pattern
+    $properties['useragent'] = $user_agent;
+    $properties['browser_name_pattern'] = strtr($user_agent_properties->useragent, '%_', '*?');
+  }
+  else {
+    // Set the user agent name and name pattern to 'unrecognized'
+    $properties['useragent'] = 'unrecognized';
+    $properties['browser_name_pattern'] = strtr('unrecognized', '%_', '*?');
+  }
+
+  return $properties;
+}
diff --git a/import.inc b/import.inc
index 7fb9ea5..baa9e8e 100644
--- a/import.inc
+++ b/import.inc
@@ -1,147 +1,163 @@
-<?php
-/**
- * @file
- * Browscap data import functions.
- */
-
-/**
- * Helper function to update the browscap data.
- *
- * @param boolean $cron
- *   Optional import environment. If false, display status messages to the user in addition to logging information with the watchdog.
- */
-function _browscap_import($cron = TRUE) {
-  // Check the local browscap data version number
-  $local_version = variable_get('browscap_version', 0);
-
-  // Retrieve the current browscap data version number using HTTP
-  $current_version = drupal_http_request('http://tempdownloads.browserscap.com/versions/version-number.php');
-
-  // Log an error if the browscap version number could not be retrieved
-  if (isset($current_version->error)) {
-    // Log a message with the watchdog
-    watchdog('browscap', "Couldn't check version: %error", array('%error' => $current_version->error), WATCHDOG_ERROR);
-
-    // Display a message to the user if the update process was triggered manually
-    if ($cron == FALSE) {
-      drupal_set_message(t("Couldn't check version: %error", array('%error' => $current_version->error)), 'error');
-    }
-
-    return;
-  }
-
-  // Sanitize the returned version number
-  $current_version = check_plain(trim($current_version->data));
-
-  // Compare the current and local version numbers to determine if the browscap
-  // data requires updating
-  if ($current_version == $local_version) {
-    // Log a message with the watchdog
-    watchdog('browscap', 'No new version of browscap to import');
-
-    // Display a message to the user if the update process was triggered manually
-    if ($cron == FALSE) {
-      drupal_set_message(t('No new version of browscap to import'));
-    }
-
-    return;
-  }
-
-  // Retrieve the browscap data using HTTP
-  $browscap_data = drupal_http_request('http://tempdownloads.browserscap.com/stream.php?BrowsCapINI');
-
-  // Log an error if the browscap data could not be retrieved
-  if (isset($browscap_data->error) || empty($browscap_data)) {
-    // Log a message with the watchdog
-    watchdog('browscap', "Couldn't retrieve updated browscap: %error", array('%error' => $browscap_data->error), WATCHDOG_ERROR);
-
-    // Display a message to the user if the update process was triggered manually
-    if ($cron == FALSE) {
-      drupal_set_message(t("Couldn't retrieve updated browscap: %error", array('%error' => $browscap_data->error)), 'error');
-    }
-
-    return;
-  }
-
-  // Parse the returned browscap data
-  // The parse_ini_string function is preferred but only available in PHP 5.3.0
-  if (version_compare(PHP_VERSION, '5.3.0', '>=')) {
-    // Retrieve the browscap data
-    $browscap_data = $browscap_data->data;
-
-    // Replace 'true' and 'false' with '1' and '0'
-    $browscap_data = strtr($browscap_data, array("=true\r" => "=1\r", "=false\r" => "=0\r"));
-
-    // Parse the browscap data as a string
-    $browscap_data = parse_ini_string($browscap_data, TRUE, INI_SCANNER_RAW);
-  }
-  else {
-    // Create a path and filename
-    $server = $_SERVER['SERVER_NAME'];
-    $path = variable_get('file_temporary_path', '/tmp');
-    $file = "$path/browscap_$server.ini";
-
-    // Write the browscap data to a file
-    $browscap_file = fopen($file, "w");
-    fwrite($browscap_file, $browscap_data->data);
-    fclose($browscap_file);
-
-    // Parse the browscap data as a file
-    $browscap_data = parse_ini_file($file, TRUE);
-  }
-
-  if ($browscap_data) {
-    // Find the version information
-    // The version information is the first entry in the array
-    $version = array_shift($browscap_data);
-
-    // Store the data available for each user agent
-    foreach ($browscap_data as $key => $values) {
-      // Store the current value
-      $e = $values;
-
-      // Create an array to hold the last parent
-      $last_parent = array();
-
-      // Recurse through the available user agent information
-      while (isset($values['Parent']) && $values['Parent'] !== $last_parent) {
-        $values = isset($browscap_data[$values['Parent']]) ? $browscap_data[$values['Parent']] : array();
-        $e = array_merge($values, $e);
-        $last_parent = $values;
-      }
-
-      // Replace '*?' with '%_'
-      $user_agent = strtr($key, '*?', '%_');
-
-      // Change all array keys to lowercase
-      $e = array_change_key_case($e);
-
-      // Delete all data about the current user agent from the database
-      db_delete('browscap')
-        ->condition('useragent', $user_agent)
-        ->execute();
-
-      // Insert all data about the current user agent into the database
-      db_insert('browscap')
-        ->fields(array(
-         'useragent' => $user_agent,
-         'data' => serialize($e)
-        ))
-        ->execute();
-    }
-
-    // Clear the browscap data cache
-    cache_clear_all('*', 'cache_browscap', TRUE);
-
-    // Update the browscap version
-    variable_set('browscap_version', $current_version);
-
-    // Log a message with the watchdog
-    watchdog('browscap', 'New version of browscap imported: %version', array('%version' => $current_version));
-
-    // Display a message to the user if the update process was triggered manually
-    if ($cron == FALSE) {
-      drupal_set_message(t('New version of browscap imported: %version', array('%version' => $current_version)));
-    }
-  }
-}
+<?php
+/**
+ * @file
+ * Browscap data import functions.
+ */
+
+/**
+ * Helper function to update the browscap data.
+ *
+ * @param boolean $cron
+ *   Optional import environment. If false, display status messages to the user in addition to logging information with the watchdog.
+ */
+function _browscap_import($cron = TRUE) {
+  // Check the local browscap data version number
+  $local_version = variable_get('browscap_version', 0);
+
+  // Retrieve the current browscap data version number using HTTP
+  $current_version = drupal_http_request('http://tempdownloads.browserscap.com/versions/version-number.php');
+
+  // Log an error if the browscap version number could not be retrieved
+  if (isset($current_version->error)) {
+    // Log a message with the watchdog
+    watchdog('browscap', "Couldn't check version: %error", array('%error' => $current_version->error), WATCHDOG_ERROR);
+
+    // Display a message to the user if the update process was triggered manually
+    if ($cron == FALSE) {
+      drupal_set_message(t("Couldn't check version: %error", array('%error' => $current_version->error)), 'error');
+    }
+
+    return;
+  }
+
+  // Sanitize the returned version number
+  $current_version = check_plain(trim($current_version->data));
+
+  // Compare the current and local version numbers to determine if the browscap
+  // data requires updating
+  if ($current_version == $local_version) {
+    // Log a message with the watchdog
+    watchdog('browscap', 'No new version of browscap to import');
+
+    // Display a message to the user if the update process was triggered manually
+    if ($cron == FALSE) {
+      drupal_set_message(t('No new version of browscap to import'));
+    }
+
+    return;
+  }
+
+  // Retrieve the browscap data using HTTP
+  $browscap_data = drupal_http_request('http://tempdownloads.browserscap.com/stream.php?BrowsCapINI');
+
+  // Log an error if the browscap data could not be retrieved
+  if (isset($browscap_data->error) || empty($browscap_data)) {
+    // Log a message with the watchdog
+    watchdog('browscap', "Couldn't retrieve updated browscap: %error", array('%error' => $browscap_data->error), WATCHDOG_ERROR);
+
+    // Display a message to the user if the update process was triggered manually
+    if ($cron == FALSE) {
+      drupal_set_message(t("Couldn't retrieve updated browscap: %error", array('%error' => $browscap_data->error)), 'error');
+    }
+
+    return;
+  }
+
+  // Parse the returned browscap data
+  // The parse_ini_string function is preferred but only available in PHP 5.3.0
+  if (version_compare(PHP_VERSION, '5.3.0', '>=')) {
+    // Retrieve the browscap data
+    $browscap_data = $browscap_data->data;
+
+    // Replace 'true' and 'false' with '1' and '0'
+    $browscap_data = preg_replace(
+      array(
+        "/=\s*true\s*\n/",
+        "/=\s*false\s*\n/",
+      ),
+      array(
+        "=1\n",
+        "=0\n",
+      ),
+      $browscap_data
+    );
+
+    // Parse the browscap data as a string
+    $browscap_data = parse_ini_string($browscap_data, TRUE, INI_SCANNER_RAW);
+  }
+  else {
+    // Create a path and filename
+    $server = $_SERVER['SERVER_NAME'];
+    $path = variable_get('file_temporary_path', '/tmp');
+    $file = "$path/browscap_$server.ini";
+
+    // Write the browscap data to a file
+    $browscap_file = fopen($file, "w");
+    fwrite($browscap_file, $browscap_data->data);
+    fclose($browscap_file);
+
+    // Parse the browscap data as a file
+    $browscap_data = parse_ini_file($file, TRUE);
+  }
+
+  if ($browscap_data) {
+    // Find the version information
+    // The version information is the first entry in the array
+    $version = array_shift($browscap_data);
+
+    // Store the data available for each user agent
+    foreach ($browscap_data as $key => $values) {
+      // Store the current value
+      $e = $values;
+
+      // Create an array to hold the last parent
+      $last_parent = array();
+
+      // Recurse through the available user agent information
+      while (isset($values['Parent']) && $values['Parent'] !== $last_parent) {
+        $values = isset($browscap_data[$values['Parent']]) ? $browscap_data[$values['Parent']] : array();
+        $e = array_merge($values, $e);
+        $last_parent = $values;
+      }
+
+      // Replace '*?' with '%_'
+      $user_agent = strtr($key, '*?', '%_');
+
+      // Change all array keys to lowercase
+      $e = array_change_key_case($e);
+
+      $fields = array(
+        'useragent' => $user_agent,
+        'data' => serialize($e),
+      );
+
+      foreach ($e as $name => $value) {
+        $fields[drupal_strtolower($name)] = $value;
+      }
+
+      // Delete all data about the current user agent from the database
+      db_delete('browscap')
+        ->condition('useragent', $user_agent)
+        ->execute();
+
+      // Insert all data about the current user agent into the database
+      db_insert('browscap')
+        ->fields($fields)
+        ->execute();
+    }
+
+    // Clear the browscap data cache
+    cache_clear_all('*', 'cache_browscap', TRUE);
+
+    // Update the browscap version
+    variable_set('browscap_version', $current_version);
+
+    // Log a message with the watchdog
+    watchdog('browscap', 'New version of browscap imported: %version', array('%version' => $current_version));
+
+    // Display a message to the user if the update process was triggered manually
+    if ($cron == FALSE) {
+      drupal_set_message(t('New version of browscap imported: %version', array('%version' => $current_version)));
+    }
+  }
+}
